* Object#singleton_methodsについて
  Moduleクラスのインスタンス(==module object)にこれを呼ぶと、
  継承元の特異メソッドも含まれていることに注意

    class A
      def A.x
      end
    end

    class B
      def B.y
      end
    end

  としたとき、B.singleton_methodsでは["x","y"]が返ってくる。
  しかし、class <<B; public_instance_methods; end を評価すると ["y"]が
  返ってくる。こちらを利用すべきだろう。

  
* 関数のように見えるメソッド
  class Object の private method として定義される

* class ScriptFile について
  input が String のインスタンスのときは StringIO を使おう

* rrbにおける制限
  一番最初に指定したファイルがメインである、つまり、"ruby そのファイル"を
  実行でき、かつそのときすべてのファイルをrequireするという仮定をする。
  かつ、そのファイルは実行部をif $0 == __FILE__ then .... end で
  かこっていて、requireされたときはクラス、モジュール、メソッドの定義
  以外何もしてはならない。
  特にstdoutにデータを書きだしたりしたら確実に情報の取得に失敗する。
  
  #{}による式の文字列展開の文字列中に改行が含まれてはいけない

* RRB::DumpedClassInfo#subclass_of?(classname)
  self と classname が一致していても真を返す点に注意