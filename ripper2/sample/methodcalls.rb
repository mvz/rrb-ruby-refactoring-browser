#
# This file is automatically generated from ripper.rb.in and parse.y.
# DO NOT MODIFY!!!!!!
#

#
# ripper.rb
#
# Copyright (C) 2003 Minero Aoki
#

require 'getoptlong'
require 'ripper'

module Parser
  #
  # Parser Events
  #

  def on__BEGIN(*args)
    puts 'parser on__BEGIN'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__END(*args)
    puts 'parser on__END'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__alias(*args)
    puts 'parser on__alias'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__alias_error(*args)
    puts 'parser on__alias_error'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__aref(*args)
    puts 'parser on__aref'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__aref_field(*args)
    puts 'parser on__aref_field'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__arg_ambiguous(*args)
    puts 'parser on__arg_ambiguous'
    nil
  end

  def on__arg_paren(*args)
    puts 'parser on__arg_paren'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__arglist_add(*args)
    puts 'parser on__arglist_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__arglist_add_block(*args)
    puts 'parser on__arglist_add_block'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__arglist_add_star(*args)
    puts 'parser on__arglist_add_star'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__arglist_new(*args)
    puts 'parser on__arglist_new'
    nil
  end

  def on__arglist_prepend(*args)
    puts 'parser on__arglist_prepend'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__array(*args)
    puts 'parser on__array'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__assign(*args)
    puts 'parser on__assign'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__assign_error(*args)
    puts 'parser on__assign_error'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__assoc_new(*args)
    puts 'parser on__assoc_new'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__assoclist_from_args(*args)
    puts 'parser on__assoclist_from_args'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__bare_assoc_hash(*args)
    puts 'parser on__bare_assoc_hash'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__begin(*args)
    puts 'parser on__begin'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__binary(*args)
    puts 'parser on__binary'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__block_var(*args)
    puts 'parser on__block_var'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__bodystmt(*args)
    puts 'parser on__bodystmt'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    puts "arg 3 = #{args[3]}"
    args[0]
  end

  def on__brace_block(*args)
    puts 'parser on__brace_block'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__break(*args)
    puts 'parser on__break'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__call(*args)
    puts 'parser on__call'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__case(*args)
    puts 'parser on__case'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__class(*args)
    puts 'parser on__class'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__class_name_error(*args)
    puts 'parser on__class_name_error'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__command(*args)
    puts 'parser on__command'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__command_call(*args)
    puts 'parser on__command_call'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    puts "arg 3 = #{args[3]}"
    args[0]
  end

  def on__const_ref(*args)
    puts 'parser on__const_ref'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__constpath_field(*args)
    puts 'parser on__constpath_field'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__constpath_ref(*args)
    puts 'parser on__constpath_ref'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__def(*args)
    puts 'parser on__def'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__defined(*args)
    puts 'parser on__defined'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__defs(*args)
    puts 'parser on__defs'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    puts "arg 3 = #{args[3]}"
    puts "arg 4 = #{args[4]}"
    args[0]
  end

  def on__do_block(*args)
    puts 'parser on__do_block'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__dot2(*args)
    puts 'parser on__dot2'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__dot3(*args)
    puts 'parser on__dot3'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__dyna_symbol(*args)
    puts 'parser on__dyna_symbol'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__else(*args)
    puts 'parser on__else'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__elsif(*args)
    puts 'parser on__elsif'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__ensure(*args)
    puts 'parser on__ensure'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__fcall(*args)
    puts 'parser on__fcall'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__field(*args)
    puts 'parser on__field'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__for(*args)
    puts 'parser on__for'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__hash(*args)
    puts 'parser on__hash'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__if(*args)
    puts 'parser on__if'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__if_mod(*args)
    puts 'parser on__if_mod'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__ifop(*args)
    puts 'parser on__ifop'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__iter_block(*args)
    puts 'parser on__iter_block'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__massign(*args)
    puts 'parser on__massign'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__method_add_arg(*args)
    puts 'parser on__method_add_arg'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mlhs_add(*args)
    puts 'parser on__mlhs_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mlhs_add_star(*args)
    puts 'parser on__mlhs_add_star'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mlhs_new(*args)
    puts 'parser on__mlhs_new'
    nil
  end

  def on__mlhs_paren(*args)
    puts 'parser on__mlhs_paren'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__module(*args)
    puts 'parser on__module'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mrhs_add(*args)
    puts 'parser on__mrhs_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mrhs_add_star(*args)
    puts 'parser on__mrhs_add_star'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__mrhs_new(*args)
    puts 'parser on__mrhs_new'
    nil
  end

  def on__mrhs_new_from_arglist(*args)
    puts 'parser on__mrhs_new_from_arglist'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__next(*args)
    puts 'parser on__next'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__opassign(*args)
    puts 'parser on__opassign'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__param_error(*args)
    puts 'parser on__param_error'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__params(*args)
    puts 'parser on__params'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    puts "arg 3 = #{args[3]}"
    args[0]
  end

  def on__paren(*args)
    puts 'parser on__paren'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__parse_error(*args)
    puts 'parser on__parse_error'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__program(*args)
    puts 'parser on__program'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__qwords_add(*args)
    puts 'parser on__qwords_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__qwords_new(*args)
    puts 'parser on__qwords_new'
    nil
  end

  def on__redo(*args)
    puts 'parser on__redo'
    nil
  end

  def on__regexp_literal(*args)
    puts 'parser on__regexp_literal'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__rescue(*args)
    puts 'parser on__rescue'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    puts "arg 3 = #{args[3]}"
    args[0]
  end

  def on__rescue_mod(*args)
    puts 'parser on__rescue_mod'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__restparam(*args)
    puts 'parser on__restparam'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__retry(*args)
    puts 'parser on__retry'
    nil
  end

  def on__return(*args)
    puts 'parser on__return'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__return0(*args)
    puts 'parser on__return0'
    nil
  end

  def on__sclass(*args)
    puts 'parser on__sclass'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__space(*args)
    puts 'parser on__space'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__stmts_add(*args)
    puts 'parser on__stmts_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__stmts_new(*args)
    puts 'parser on__stmts_new'
    nil
  end

  def on__string_add(*args)
    puts 'parser on__string_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__string_concat(*args)
    puts 'parser on__string_concat'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__string_content(*args)
    puts 'parser on__string_content'
    nil
  end

  def on__string_dvar(*args)
    puts 'parser on__string_dvar'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__string_embexpr(*args)
    puts 'parser on__string_embexpr'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__string_literal(*args)
    puts 'parser on__string_literal'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__super(*args)
    puts 'parser on__super'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__symbol(*args)
    puts 'parser on__symbol'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__symbol_literal(*args)
    puts 'parser on__symbol_literal'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__topconst_field(*args)
    puts 'parser on__topconst_field'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__topconst_ref(*args)
    puts 'parser on__topconst_ref'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__unary(*args)
    puts 'parser on__unary'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__undef(*args)
    puts 'parser on__undef'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__unless(*args)
    puts 'parser on__unless'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__unless_mod(*args)
    puts 'parser on__unless_mod'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__until_mod(*args)
    puts 'parser on__until_mod'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__var_alias(*args)
    puts 'parser on__var_alias'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__var_field(*args)
    puts 'parser on__var_field'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__var_ref(*args)
    puts 'parser on__var_ref'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__void_stmt(*args)
    puts 'parser on__void_stmt'
    nil
  end

  def on__when(*args)
    puts 'parser on__when'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    puts "arg 2 = #{args[2]}"
    args[0]
  end

  def on__while(*args)
    puts 'parser on__while'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__while_mod(*args)
    puts 'parser on__while_mod'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__word_add(*args)
    puts 'parser on__word_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__word_new(*args)
    puts 'parser on__word_new'
    nil
  end

  def on__words_add(*args)
    puts 'parser on__words_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__words_new(*args)
    puts 'parser on__words_new'
    nil
  end

  def on__xstring_add(*args)
    puts 'parser on__xstring_add'
    puts "arg 0 = #{args[0]}"
    puts "arg 1 = #{args[1]}"
    args[0]
  end

  def on__xstring_literal(*args)
    puts 'parser on__xstring_literal'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__xstring_new(*args)
    puts 'parser on__xstring_new'
    nil
  end

  def on__yield(*args)
    puts 'parser on__yield'
    puts "arg 0 = #{args[0]}"
    args[0]
  end

  def on__yield0(*args)
    puts 'parser on__yield0'
    nil
  end

  def on__zsuper(*args)
    puts 'parser on__zsuper'
    nil
  end
end

module Lexer
  #
  # Lexer Events
  #

  def on__backref(token)
    puts 'lexer on__backref'
    puts "token = #{token}"
    token
  end

  def on__backtick(token)
    puts 'lexer on__backtick'
    puts "token = #{token}"
    token
  end

  def on__comma(token)
    puts 'lexer on__comma'
    puts "token = #{token}"
    token
  end

  def on__comment(token)
    puts 'lexer on__comment'
    puts "token = #{token}"
    token
  end

  def on__const(token)
    puts 'lexer on__const'
    puts "token = #{token}"
    token
  end

  def on__cvar(token)
    puts 'lexer on__cvar'
    puts "token = #{token}"
    token
  end

  def on__embdoc(token)
    puts 'lexer on__embdoc'
    puts "token = #{token}"
    token
  end

  def on__embdoc_beg(token)
    puts 'lexer on__embdoc_beg'
    puts "token = #{token}"
    token
  end

  def on__embdoc_end(token)
    puts 'lexer on__embdoc_end'
    puts "token = #{token}"
    token
  end

  def on__embexpr_beg(token)
    puts 'lexer on__embexpr_beg'
    puts "token = #{token}"
    token
  end

  def on__embexpr_end(token)
    puts 'lexer on__embexpr_end'
    puts "token = #{token}"
    token
  end

  def on__embvar(token)
    puts 'lexer on__embvar'
    puts "token = #{token}"
    token
  end

  def on__float(token)
    puts 'lexer on__float'
    puts "token = #{token}"
    token
  end

  def on__gvar(token)
    puts 'lexer on__gvar'
    puts "token = #{token}"
    token
  end

  def on__heredoc_beg(token)
    puts 'lexer on__heredoc_beg'
    puts "token = #{token}"
    token
  end

  def on__heredoc_content(token)
    puts 'lexer on__heredoc_content'
    puts "token = #{token}"
    token
  end

  def on__heredoc_end(token)
    puts 'lexer on__heredoc_end'
    puts "token = #{token}"
    token
  end

  def on__ident(token)
    puts 'lexer on__ident'
    puts "token = #{token}"
    token
  end

  def on__ignored_nl(token)
    puts 'lexer on__ignored_nl'
    puts "token = #{token}"
    token
  end

  def on__int(token)
    puts 'lexer on__int'
    puts "token = #{token}"
    token
  end

  def on__ivar(token)
    puts 'lexer on__ivar'
    puts "token = #{token}"
    token
  end

  def on__kw(token)
    puts 'lexer on__kw'
    puts "token = #{token}"
    token
  end

  def on__lbrace(token)
    puts 'lexer on__lbrace'
    puts "token = #{token}"
    token
  end

  def on__lbracket(token)
    puts 'lexer on__lbracket'
    puts "token = #{token}"
    token
  end

  def on__lparen(token)
    puts 'lexer on__lparen'
    puts "token = #{token}"
    token
  end

  def on__lwsp(token)
    puts 'lexer on__lwsp'
    puts "token = #{token}"
    token
  end

  def on__nl(token)
    puts 'lexer on__nl'
    puts "token = #{token}"
    token
  end

  def on__op(token)
    puts 'lexer on__op'
    puts "token = #{token}"
    token
  end

  def on__period(token)
    puts 'lexer on__period'
    puts "token = #{token}"
    token
  end

  def on__qwords_beg(token)
    puts 'lexer on__qwords_beg'
    puts "token = #{token}"
    token
  end

  def on__rbrace(token)
    puts 'lexer on__rbrace'
    puts "token = #{token}"
    token
  end

  def on__rbracket(token)
    puts 'lexer on__rbracket'
    puts "token = #{token}"
    token
  end

  def on__regexp_beg(token)
    puts 'lexer on__regexp_beg'
    puts "token = #{token}"
    token
  end

  def on__regexp_end(token)
    puts 'lexer on__regexp_end'
    puts "token = #{token}"
    token
  end

  def on__rparen(token)
    puts 'lexer on__rparen'
    puts "token = #{token}"
    token
  end

  def on__semicolon(token)
    puts 'lexer on__semicolon'
    puts "token = #{token}"
    token
  end

  def on__symbeg(token)
    puts 'lexer on__symbeg'
    puts "token = #{token}"
    token
  end

  def on__tstring_beg(token)
    puts 'lexer on__tstring_beg'
    puts "token = #{token}"
    token
  end

  def on__tstring_content(token)
    puts 'lexer on__tstring_content'
    puts "token = #{token}"
    token
  end

  def on__tstring_end(token)
    puts 'lexer on__tstring_end'
    puts "token = #{token}"
    token
  end

  def on__words_beg(token)
    puts 'lexer on__words_beg'
    puts "token = #{token}"
    token
  end

  def on__words_sep(token)
    puts 'lexer on__words_sep'
    puts "token = #{token}"
    token
  end

  def on__scan(event, token)
  end

  def on__sp(token)
      puts "lexer on__sp"
      puts "token = #{token}"
  end  
end

class MethodCalls < Ripper
  include Parser
  include Lexer
end

def main
  opts = GetoptLong.new(
                        ["--exp", "-e", GetoptLong::REQUIRED_ARGUMENT],
                        ["--parse", "-p", GetoptLong::NO_ARGUMENT],
                        ["--lex", "-l", GetoptLong::NO_ARGUMENT])

  parse = true
  lex = true
  opts.each do |opt, arg|
    if opt == "--exp"
      $OPT_e = arg
    elsif opt == "--parse"
      parse = true
      lex = false
    elsif opt == "--lex"
      parse = false
      lex = true
    end    
  end
    
  if $OPT_e
    methcalls = Ripper.new($OPT_e)
  else
    methcalls = Ripper.new(ARGF)
  end

  methcalls.extend Parser if parse
  methcalls.extend Lexer if lex

  methcalls.parse
end

if __FILE__ == $0
  main
end
